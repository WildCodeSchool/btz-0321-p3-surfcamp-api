// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String        @id @default(uuid())
  firstname    String
  lastname     String
  email        String
  password     String
  picture      String
  role         Role          @default(USER)
  birthDate    DateTime
  isActive     Boolean       @default(false)
  phoneNumber  String
  address      Address?      @relation(fields: [addressId], references: [id])
  addressId    String?
  reservations Reservation[]
  comments     Comment[]
  createdAt    DateTime      @default(now())
}

model Address {
  id           String    @id @default(uuid())
  zipcode      String
  city         String
  street       String
  streetNumber String
  lat          String
  long         String
  countryCode  String
  user         User?
  property     Property?
  createdAt    DateTime  @default(now())
}

model Property {
  id           String            @id @default(uuid())
  name         String
  description  String
  type         String
  priceByNight Decimal           @db.Money
  status       Boolean
  pictures     PropertyPicture[]
  address      Address           @relation(fields: [addressId], references: [id])
  addressId    String
  rooms        Room[]
  features     Feature[]
  reservations Reservation[]
  comments     Comment[]
  phoneNumber  String
  createdAt    DateTime          @default(now())
}

model Country {
  id	            String		@id @default(uuid())
  name	          String
  title           String
  description	    String
  textSeo         String
  countryCode     String
  countryPictures	CountryPicture[]
  createdAt       DateTime  @default(now())	
}

model CountryPicture {
  id	        String		@id @default(uuid())
  name	      String
  url	        String
  country     Country   @relation(fields: [countryId], references: [id])
  countryId   String
  createdAt   DateTime  @default(now())
}

model City {
  id	          String		@id @default(uuid())
  name	        String
  title         String
  description	  String
  textSeo       String
  countryCode	  String
  cityPictures	CityPicture[]
  createdAt     DateTime  @default(now())
}

model CityPicture {
  id	       String		@id @default(uuid())
  name	     String
  url	       String
  city       City     @relation(fields: [cityId], references: [id])
  cityId     String
  createdAt  DateTime @default(now())
}

model Feature {
  id         String   @id @default(uuid())
  label      String
  type       String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
  iconUrl	   String
  createdAt  DateTime @default(now())
}

model PropertyPicture {
  id          String   @id @default(uuid())
  name        String
  description String
  url         String
  property    Property @relation(fields: [propertyId], references: [id])
  propertyId  String
  createdAt   DateTime @default(now())
}

model Room {
  id           String        @id @default(uuid())
  name         String
  description  String
  capacity     Int
  priceByNight Decimal       @db.Money
  property     Property      @relation(fields: [propertyId], references: [id])
  propertyId   String
  reservation  Reservation[]
  comments     Comment[]
  createdAt    DateTime      @default(now())
}

model Comment {
  id            String      @id @default(uuid())
  comment       String      @db.Text
  rate          Int
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  property      Property?   @relation(fields: [propertyId], references: [id])
  propertyId    String?
  room          Room?       @relation(fields: [roomId], references: [id])
  roomId        String?
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId String
  createdAt     DateTime    @default(now())
}

model Reservation {
  id            String    @id @default(uuid())
  startDate     DateTime
  endDate       DateTime
  customerCount Int
  status        Status    @default(PENDING)
  user          User?     @relation(fields: [userId], references: [id])
  userId        String
  property      Property? @relation(fields: [propertyId], references: [id])
  propertyId    String?
  room          Room?     @relation(fields: [roomId], references: [id])
  roomId        String?
  comment       Comment?
  createdAt     DateTime  @default(now())
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
  RENTER
}

enum Status {
  PENDING
  CONFIRMED
  CANCELED
  CONSUMED
}
